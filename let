lexeme: int position 1
lexeme: member1 position 3
lexeme: ; position 4
lexeme: } position 5
lexeme: ; position 6
lexeme: class position 8
lexeme: Utility position 10
lexeme: : position 12
lexeme: InheritedUtility position 14
lexeme: { position 16
lexeme: int position 19
lexeme: var1 position 21
lexeme: [ position 22
lexeme: 4 position 23
lexeme: ] position 24
lexeme: [ position 25
lexeme: 5 position 26
lexeme: ] position 27
lexeme: [ position 28
lexeme: 7 position 29
lexeme: ] position 30
lexeme: [ position 31
lexeme: 8 position 32
lexeme: ] position 33
lexeme: [ position 34
lexeme: 9 position 35
lexeme: ] position 36
lexeme: [ position 37
lexeme: 1 position 38
lexeme: ] position 39
lexeme: [ position 40
lexeme: 0 position 41
lexeme: ] position 42
lexeme: ; position 43
lexeme: float position 46
lexeme: var2 position 48
lexeme: ; position 49
lexeme: int position 52
lexeme: findMax position 54
lexeme: ( position 55
lexeme: int position 56
lexeme: array position 58
lexeme: [ position 59
lexeme: 100 position 60
lexeme: ] position 61
lexeme: ) position 62
lexeme: ; position 63
lexeme: int position 66
lexeme: findMin position 68
lexeme: ( position 69
lexeme: int position 70
lexeme: array position 72
lexeme: [ position 73
lexeme: 100 position 74
lexeme: ] position 75
lexeme: ) position 76
lexeme: ; position 77
lexeme: } position 78
lexeme: ; position 79
lexeme: int position 81
lexeme: Utility position 83
lexeme: :: position 84
lexeme: findMax position 85
lexeme: ( position 86
lexeme: int position 87
lexeme: array position 89
lexeme: [ position 90
lexeme: 100 position 91
lexeme: ] position 92
lexeme: ) position 93
lexeme: { position 94
lexeme: int position 97
lexeme: maxValue position 99
lexeme: ; position 100
lexeme: int position 103
lexeme: idx position 105
lexeme: ; position 106
lexeme: maxValue position 109
lexeme: = position 111
lexeme: array position 113
lexeme: [ position 114
lexeme: 100 position 115
lexeme: ] position 116
lexeme: ; position 117
lexeme: for position 120
lexeme: ( position 121
lexeme: int position 123
lexeme: idx position 125
lexeme: = position 127
lexeme: 99 position 129
lexeme: ; position 130
lexeme: idx position 132
lexeme: > position 134
lexeme: 0 position 136
lexeme: ; position 137
lexeme: idx position 139
lexeme: = position 141
lexeme: idx position 143
lexeme: - position 145
lexeme: 1 position 147
lexeme: ) position 149
lexeme: { position 150
lexeme: if position 153
lexeme: ( position 154
lexeme: array position 155
lexeme: [ position 156
lexeme: idx position 157
lexeme: ] position 158
lexeme: > position 160
lexeme: maxValue position 162
lexeme: ) position 163
lexeme: then position 165
lexeme: { position 167
lexeme: maxValue position 170
lexeme: = position 172
lexeme: array position 174
lexeme: [ position 175
lexeme: idx position 176
lexeme: ] position 177
lexeme: ; position 178
lexeme: } position 179
lexeme: else position 182
lexeme: { position 183
lexeme: } position 184
lexeme: ; position 185
lexeme: } position 188
lexeme: ; position 189
lexeme: return position 192
lexeme: ( position 194
lexeme: maxValue position 195
lexeme: ) position 196
lexeme: ; position 197
lexeme: } position 198
lexeme: ; position 199
lexeme: int position 201
lexeme: Utility position 203
lexeme: :: position 204
lexeme: findMin position 205
lexeme: ( position 206
lexeme: int position 207
lexeme: array position 209
lexeme: [ position 210
lexeme: 100 position 211
lexeme: ] position 212
lexeme: ) position 213
lexeme: { position 214
lexeme: int position 217
lexeme: minValue position 219
lexeme: ; position 220
lexeme: int position 223
lexeme: idx position 225
lexeme: ; position 226
lexeme: minValue position 229
lexeme: = position 231
lexeme: array position 233
lexeme: [ position 234
lexeme: 100 position 235
lexeme: ] position 236
lexeme: ; position 237
lexeme: for position 240
lexeme: ( position 241
lexeme: int position 243
lexeme: idx position 245
lexeme: = position 247
lexeme: 1 position 249
lexeme: ; position 250
lexeme: idx position 252
lexeme: <= position 254
lexeme: 99 position 256
lexeme: ; position 257
lexeme: idx position 259
lexeme: = position 261
lexeme: ( position 263
lexeme: idx position 265
lexeme: ) position 267
lexeme: + position 269
lexeme: 1 position 271
lexeme: ) position 272
lexeme: { position 274
lexeme: if position 277
lexeme: ( position 278
lexeme: array position 279
lexeme: [ position 280
lexeme: idx position 281
lexeme: ] position 282
lexeme: < position 284
lexeme: maxValue position 286
lexeme: + position 288
lexeme: 1 position 290
lexeme: / position 292
lexeme: 8 position 294
lexeme: or position 296
lexeme: idx position 298
lexeme: ) position 299
lexeme: then position 301
lexeme: { position 303
lexeme: maxValue position 306
lexeme: = position 308
lexeme: array position 310
lexeme: [ position 311
lexeme: idx position 312
lexeme: ] position 313
lexeme: ; position 314
lexeme: } position 315
lexeme: else position 318
lexeme: { position 319
lexeme: } position 320
lexeme: ; position 321
lexeme: } position 324
lexeme: ; position 325
lexeme: return position 328
lexeme: ( position 330
lexeme: minValue position 331
lexeme: ) position 332
lexeme: ; position 333
lexeme: } position 334
lexeme: ; position 335
lexeme: float position 337
lexeme: randomize position 339
lexeme: ( position 340
lexeme: ) position 341
lexeme: { position 342
lexeme: float position 345
lexeme: value position 347
lexeme: ; position 348
lexeme: value position 351
lexeme: = position 353
lexeme: 100 position 355
lexeme: * position 357
lexeme: ( position 359
lexeme: 2 position 360
lexeme: + position 362
lexeme: 3.0 position 364
lexeme: / position 366
lexeme: 7.0006 position 368
lexeme: ) position 369
lexeme: ; position 370
lexeme: value position 373
lexeme: = position 375
lexeme: 1.05 position 377
lexeme: + position 379
lexeme: ( position 381
lexeme: ( position 382
lexeme: 2.04 position 383
lexeme: * position 385
lexeme: 2.47 position 387
lexeme: ) position 388
lexeme: - position 390
lexeme: 3.0 position 392
lexeme: ) position 393
lexeme: + position 395
lexeme: 7.0006 position 397
lexeme: > position 399
lexeme: 1 position 401
lexeme: and position 403
lexeme: not position 405
lexeme: - position 407
lexeme: 1 position 409
lexeme: ; position 410
lexeme: return position 413
lexeme: ( position 415
lexeme: value position 416
lexeme: ) position 417
lexeme: ; position 418
lexeme: } position 419
lexeme: ; position 420
lexeme: program position 422
lexeme: { position 424
lexeme: int position 427
lexeme: sample position 429
lexeme: [ position 430
lexeme: 100 position 431
lexeme: ] position 432
lexeme: ; position 433
lexeme: int position 436
lexeme: idx position 438
lexeme: ; position 439
lexeme: int position 442
lexeme: maxValue position 444
lexeme: ; position 445
lexeme: int position 448
lexeme: minValue position 450
lexeme: ; position 451
lexeme: Utility position 454
lexeme: utility position 456
lexeme: ; position 457
lexeme: Utility position 460
lexeme: arrayUtility position 462
lexeme: [ position 463
lexeme: 2 position 464
lexeme: ] position 465
lexeme: [ position 466
lexeme: 3 position 467
lexeme: ] position 468
lexeme: [ position 469
lexeme: 6 position 470
lexeme: ] position 471
lexeme: [ position 472
lexeme: 7 position 473
lexeme: ] position 474
lexeme: ; position 475
lexeme: for position 478
lexeme: ( position 479
lexeme: int position 480
lexeme: t position 482
lexeme: = position 484
lexeme: 0 position 486
lexeme: ; position 487
lexeme: t position 489
lexeme: <= position 490
lexeme: 100 position 491
lexeme: ; position 493
lexeme: t position 495
lexeme: = position 497
lexeme: t position 499
lexeme: + position 501
lexeme: 1 position 503
lexeme: ) position 504
lexeme: { position 506
lexeme: get position 509
lexeme: ( position 510
lexeme: sample position 511
lexeme: [ position 512
lexeme: t position 513
lexeme: ] position 514
lexeme: ) position 515
lexeme: ; position 516
lexeme: sample position 519
lexeme: [ position 520
lexeme: t position 521
lexeme: ] position 522
lexeme: = position 524
lexeme: ( position 526
lexeme: sample position 527
lexeme: [ position 528
lexeme: t position 529
lexeme: ] position 530
lexeme: * position 532
lexeme: randomize position 534
lexeme: ( position 535
lexeme: ) position 536
lexeme: ) position 537
lexeme: ; position 538
lexeme: } position 541
lexeme: ; position 542
lexeme: maxValue position 545
lexeme: = position 547
lexeme: utility position 549
lexeme: . position 550
lexeme: findMax position 551
lexeme: ( position 552
lexeme: sample position 553
lexeme: ) position 554
lexeme: ; position 555
lexeme: minValue position 558
lexeme: = position 560
lexeme: utility position 562
lexeme: . position 563
lexeme: findMin position 564
lexeme: ( position 565
lexeme: sample position 566
lexeme: ) position 567
lexeme: ; position 568
lexeme: utility position 571
lexeme: . position 572
lexeme: var1 position 573
lexeme: [ position 574
lexeme: 4 position 575
lexeme: ] position 576
lexeme: [ position 577
lexeme: 1 position 578
lexeme: ] position 579
lexeme: [ position 580
lexeme: 0 position 581
lexeme: ] position 582
lexeme: [ position 583
lexeme: 0 position 584
lexeme: ] position 585
lexeme: [ position 586
lexeme: 0 position 587
lexeme: ] position 588
lexeme: [ position 589
lexeme: 0 position 590
lexeme: ] position 591
lexeme: [ position 592
lexeme: 0 position 593
lexeme: ] position 594
lexeme: = position 596
lexeme: 10 position 598
lexeme: ; position 599
lexeme: arrayUtility position 602
lexeme: [ position 603
lexeme: utility position 604
lexeme: . position 605
lexeme: var1 position 606
lexeme: [ position 607
lexeme: 1 position 608
lexeme: ] position 609
lexeme: [ position 610
lexeme: 2 position 611
lexeme: ] position 612
lexeme: [ position 613
lexeme: 3 position 614
lexeme: ] position 615
lexeme: [ position 616
lexeme: 4 position 617
lexeme: ] position 618
lexeme: [ position 619
lexeme: 5 position 620
lexeme: ] position 621
lexeme: [ position 622
lexeme: 6 position 623
lexeme: ] position 624
lexeme: [ position 625
lexeme: idx position 626
lexeme: + position 627
lexeme: maxValue position 628
lexeme: ] position 629
lexeme: ] position 630
lexeme: [ position 631
lexeme: 1 position 632
lexeme: ] position 633
lexeme: [ position 634
lexeme: 1 position 635
lexeme: ] position 636
lexeme: [ position 637
lexeme: 1 position 638
lexeme: ] position 639
lexeme: . position 640
lexeme: var2 position 641
lexeme: = position 643
lexeme: 2.5 position 645
lexeme: ; position 646
lexeme: put position 649
lexeme: ( position 650
lexeme: maxValue position 651
lexeme: ) position 652
lexeme: ; position 653
lexeme: put position 656
lexeme: ( position 657
lexeme: minValue position 658
lexeme: ) position 659
lexeme: ; position 660
lexeme: } position 661
lexeme: ; position 662
int
id
;
}
;
class
id
:
id
{
int
id
[
intNum
]
[
intNum
]
[
intNum
]
[
intNum
]
[
intNum
]
[
intNum
]
[
intNum
]
;
float
id
;
int
id
(
int
id
[
intNum
]
)
;
int
id
(
int
id
[
intNum
]
)
;
}
;
int
id
sr
id
(
int
id
[
intNum
]
)
{
int
id
;
int
id
;
id
=
id
[
intNum
]
;
for
(
int
id
=
intNum
;
id
gt
intNum
;
id
=
id
-
intNum
)
{
if
(
id
[
id
]
gt
id
)
then
{
id
=
id
[
id
]
;
}
else
{
}
;
}
;
return
(
id
)
;
}
;
int
id
sr
id
(
int
id
[
intNum
]
)
{
int
id
;
int
id
;
id
=
id
[
intNum
]
;
for
(
int
id
=
intNum
;
id
leq
intNum
;
id
=
(
id
)
+
intNum
)
{
if
(
id
[
id
]
lt
id
+
intNum
/
intNum
or
id
)
then
{
id
=
id
[
id
]
;
}
else
{
}
;
}
;
return
(
id
)
;
}
;
float
id
(
)
{
float
id
;
id
=
intNum
*
(
intNum
+
floatNum
/
floatNum
)
;
id
=
floatNum
+
(
(
floatNum
*
floatNum
)
-
floatNum
)
+
floatNum
gt
intNum
and
not
-
intNum
;
return
(
id
)
;
}
;
program
{
int
id
[
intNum
]
;
int
id
;
int
id
;
int
id
;
id
id
;
id
id
[
intNum
]
[
intNum
]
[
intNum
]
[
intNum
]
;
for
(
int
id
=
intNum
;
id
leq
intNum
;
id
=
id
+
intNum
)
{
get
(
id
[
id
]
)
;
id
[
id
]
=
(
id
[
id
]
*
id
(
)
)
;
}
;
id
=
id
.
id
(
id
)
;
id
=
id
.
id
(
id
)
;
id
.
id
[
intNum
]
[
intNum
]
[
intNum
]
[
intNum
]
[
intNum
]
[
intNum
]
[
intNum
]
=
intNum
;
id
[
id
.
id
[
intNum
]
[
intNum
]
[
intNum
]
[
intNum
]
[
intNum
]
[
intNum
]
[
id
+
id
]
]
[
intNum
]
[
intNum
]
[
intNum
]
.
id
=
floatNum
;
put
(
id
)
;
put
(
id
)
;
}
;
STACK : {3[$ProgFuncDef][[$ProgFuncDef]]3409640960}
STACK : {5[$Prog;FuncBodyFuncHead][[$Prog;FuncBodyFuncHead]]5409640960}
STACK : {7[$Prog;FuncBodyFuncHeadTailidType][[$Prog;FuncBodyFuncHeadTailidType]]7409640960}
STACK : {7[$Prog;FuncBodyFuncHeadTailidint][[$Prog;FuncBodyFuncHeadTailidint]]7409640960}
STACK : {6[$Prog;FuncBodyFuncHeadTailidint][[$Prog;FuncBodyFuncHeadTailidint]]6409640960}
STACK : {5[$Prog;FuncBodyFuncHeadTailidint][[$Prog;FuncBodyFuncHeadTailidint]]5409640960}
STACK : {5[$Prog;FuncBodyFuncHeadTailidint][[$Prog;FuncBodyFuncHeadTailidint]]5409640960}
STACK : {5[$Prog;FuncBodyFuncHeadTailidint][[$Prog;FuncBodyFuncHeadTailidint]]5409640960}
STACK : {5[$Prog;FuncBodyFuncHeadTailidint][[$Prog;FuncBodyFuncHeadTailidint]]5409640960}
STACK : {5[$Prog;FuncBodyFuncHeadTailidint][[$Prog;FuncBodyFuncHeadTailidint]]5409640960}
STACK : {5[$Prog;FuncBodyFuncHeadTailidint][[$Prog;FuncBodyFuncHeadTailidint]]5409640960}
STACK : {5[$Prog;FuncBodyFuncHeadTailidint][[$Prog;FuncBodyFuncHeadTailidint]]5409640960}
STACK : {5[$Prog;FuncBodyFuncHeadTailidint][[$Prog;FuncBodyFuncHeadTailidint]]5409640960}
STACK : {5[$Prog;FuncBodyFuncHeadTailidint][[$Prog;FuncBodyFuncHeadTailidint]]5409640960}
STACK : {5[$Prog;FuncBodyFuncHeadTailidint][[$Prog;FuncBodyFuncHeadTailidint]]5409640960}
STACK : {5[$Prog;FuncBodyFuncHeadTailidint][[$Prog;FuncBodyFuncHeadTailidint]]5409640960}
STACK : {5[$Prog;FuncBodyFuncHeadTailidint][[$Prog;FuncBodyFuncHeadTailidint]]5409640960}
STACK : {5[$Prog;FuncBodyFuncHeadTailidint][[$Prog;FuncBodyFuncHeadTailidint]]5409640960}
STACK : {5[$Prog;FuncBodyFuncHeadTailidint][[$Prog;FuncBodyFuncHeadTailidint]]5409640960}
STACK : {5[$Prog;FuncBodyFuncHeadTailidint][[$Prog;FuncBodyFuncHeadTailidint]]5409640960}
STACK : {5[$Prog;FuncBodyFuncHeadTailidint][[$Prog;FuncBodyFuncHeadTailidint]]5409640960}
STACK : {5[$Prog;FuncBodyFuncHeadTailidint][[$Prog;FuncBodyFuncHeadTailidint]]5409640960}
Expecting one of the following:  sr { (
Expecting one of the following:  sr { (
Expecting one of the following:  ( sr {
Expecting one of the following:  sr { (
Expecting one of the following:  sr { (
Expecting one of the following:  sr { (
Expecting one of the following:  sr { (
Expecting one of the following:  sr { (
Expecting one of the following:  sr { (
Expecting one of the following:  sr { (
Expecting one of the following:  sr { (
Expecting one of the following:  sr { (
Expecting one of the following:  sr { (
Expecting one of the following:  sr { (
Expecting one of the following:  sr { (
Expecting one of the following:  sr { (
Expecting one of the following:  sr { (
