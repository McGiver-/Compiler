/*-----------------------------------------------------------------------------------------------------------*/
  /*                                            GRAMMAR                                                        */
  /*-----------------------------------------------------------------------------------------------------------*/
  

   Prog              -> @Prog @ClassList ClassDecl @FuncDefList FuncDef ProgBody @3:1
   Prog              -> ProgBody @ProgBody @4:4 | FuncDef Prog | @ClassList ClassDecl Prog 
   ProgBody          -> program FuncBody ;
   FuncDef           -> FuncHead FuncBody @FuncDef @6:6 @2:1 ;
   FuncBody          -> { @StatBlock FuncVarDecl }
   ClassDecl         -> @ClassDecl class id @id @InheritList Inherit { @MemberList ClassVarDecl } @4:1 @2:1 ClassDecl; 
   ClassVarDecl      -> Decl ClassVarDeclTail 
                      | EPSILON @EPSILON @2:1
   Type              -> float @float | id @id | int @int
   Decl              -> Type @Type @2:2 id @id 
   ClassVarDeclTail  -> @VarDecl @DimList ArraySizeTail @4:3 @2:1 ; ClassVarDecl 
                      | FuncDecl 
   FuncVarDecl       -> StatementNoAssign @Stat @2:2 @2:1 StatementTail 
                      | Type @Type @2:2 FuncVarDeclTail 
                      | EPSILON 
   FuncVarDeclTail   -> id @id @DimList ArraySizeTail @VarDecl @4:4 @2:1 ; FuncVarDecl 
                      | VariableTail @Var AssignStatTail @AssignStat ; StatementTail    
   Variable          -> id @id VariableTail 
   VariableTail      -> VarNest | VarIndiceTail 
   VarIndiceTail     -> Indice VariableTail 
                      | EPSILON 
   VarNest           -> . Variable
   FParamsTail       -> , FParams | EPSILON 
   ProgBody          -> program FuncBody ; 
   Inherit           -> : id @id @2:1 InheritList | EPSILON 
   InheritList       -> , id @id @2:1 InheritList | EPSILON 
   FuncDefList       -> Decl FuncDefListTail 
                      | EPSILON
   FuncDefListTail   -> FuncDef FuncDefList 
   FuncDecl	         -> ( @FparamList FParams ) ; @FuncDecl ClassVarDecl	
   ArraySize         -> [ intNum @intNum @2:1 ] 
   ArraySizeTail     -> ArraySize ArraySizeTail 
                      | EPSILON 
   FuncHead          -> Type @Type @2:2 @ScopeSpec id @id FuncHeadTail 
   FuncHeadTail      -> @2:1 :: id @id  ( @FparamsList FParams ) | ( @FparamsList FParams ) 
                      | EPSILON  /// i think this shouldnt be here 
   FParams           -> Type @Type @2:2 id @id @DimList ArraySizeTail @Fparam @4:4 @2:1 FParamsTail 
                      | EPSILON 
   AssignStat        -> Variable AssignStatTail 
   AssignStatTail    -> AssignOp Expr 
   Statement         -> AssignStat ; | StatementNoAssign @Stat @2:2 @2:1
   StatementTail     -> Statement StatementTail 
                      | EPSILON 
   StatementNoAssign -> for @forStat ( Decl AssignOp Expr ; RelExpr ; AssignStat ) StatBlock ; 
                      | if @ifStat ( Expr ) then StatBlock else StatBlock ; 
                      | get @getStat ( Variable ) ; 
                      | put @putStat ( @Expr Expr ) @2:1 ; 
                      | return @returnStat ( @Expr Expr ) @2:1 ; 
   StatBlock         -> { StatementTail } | Statement 
                      | EPSILON 
   Expr              -> @ArithExpr ArithExpr RelExprTail 
   RelExpr           -> @RelExpr @ArithExpr ArithExpr @RelOp RelOp @ArithExpr ArithExpr @3:2 @2:1
   RelExprTail       -> @RelOp RelOp @ArithExpr ArithExpr @3:2 | EPSILON 
   ArithExpr         -> @Term Term @2:1 ArithExprTail 
   ArithExprTail     -> @AddOp AddOp @Term Term @3:2 @ArithExpr @2:2 ArithExprTail 
                      | EPSILON 
   Term              -> @Factor Factor @2:1 TermTail 
   TermTail          -> @Multop MultOp @Factor Factor @3:2 TermTail 
                      | EPSILON 
   Factor            -> ( @ArithExpr ArithExpr @2:1 ) | not @not @2:1 @Factor Factor | EvalExprHead @2:1
                      | Num @Num @2:1 | @Sign Sign @Factor Factor
   Num               -> floatNum @floatNum | intNum @intNum
   Sign              -> + @+ @2:1 | - @- @2:1
   EvalExprHead      -> id @id EvalExprTail 
   EvalExprTail      -> @FCall FunctionCallExpr | EvalIndiceTail 
   EvalIndiceHead    -> Indice EvalIndiceTail 
   EvalIndiceTail    -> EvalNestHead | EvalIndiceHead 
                      | EPSILON 
   EvalNestHead      -> . EvalExprHead 
   
   FunctionCallExpr  -> ( @AParams AParams @3:2 ) 
   Indice            -> [ @ArithExpr ArithExpr @2:1 @2:1 ] 
   ArraySize         -> [ intNum @DimList] 
   ArraySizeTail     -> ArraySize ArraySizeTail 
                      | EPSILON 
   Type              -> float @float| id @id | int @int
   AParams           -> Expr @2:1 AParamsTail | EPSILON 
   AParamsTail       -> , AParams | EPSILON 
   AssignOp          -> = 
   RelOp             -> eq @eq @2:1 | geq @geq @2:1 | gt @gt @2:1 | leq @leq @2:1 | lt @lt @2:1 | neq @neq @2:1
   AddOp             -> + @+ @2:1 | - @- @2:1 | or @or @2:1
   MultOp            -> * @* @2:1 | / @/ @2:1 | and @and @2:1 

  /*-----------------------------------------------------------------------------------------------------------*/
  /*                                            FIRST AND FOLLOW SETS                                          */
  /*-----------------------------------------------------------------------------------------------------------*/

FIRST(Prog) = {float,id,int,class,program} 
FIRST(ProgBody) = {program}	
FIRST(ClassDecl) = {class} 
FIRST(Inherit) = {EPSILON,:}
FIRST(InheritList) = {EPSILON,,}	
FIRST(ClassVarDecl) = {EPSILON,float,id,int}	
FIRST(Decl) = {float,id,int} 
FIRST(ClassVarDeclTail) = {(,[,;} 
FIRST(FundHead) = {float,id,int}  
FIRST(FuncHeadTail) = {EPSILON,(,sr} 
FIRST(FuncBody) = {{} 
FIRST(FuncDecl) = {(} 
FIRST(FuncVarDecl) = {EPSILON,float,id,int,for,if,get,put,return} 
FIRST(FuncVarDeclTail) = {[,.,=,id} 
FIRST(ArraySize) = {[} 
FIRST(ArraySizeTail) = {EPSILON,[} 
FIRST(Type) = {int,id,float} 
FIRST(FParams) = {EPSILON,float,id,int} 
FIRST(FParamsTail) = {EPSILON,,} 
FIRST(FuncDefList) = {EPSILON,float,id,int} 
FIRST(FuncDefListTail) = {float,id,int} 
FIRST(FuncDef) = {float,id,int} 
FIRST(AssignStat) = {id} 
FIRST(AssignStatTail) = {=} 
FIRST(Statement) = {for,if,get,put,return,id}
FIRST(StatementTail) = {EPSILON,id,for,if,get,put,return} 
FIRST(StatementNoAssign) = {return,put,get,if,for} 
FIRST(StatBlock) = {EPSILON,id,for,if,get,put,return,{} 
FIRST(Expr) = {(,not,floatNum,intNum,id,+,-} 
FIRST(RelExpr) = {(,not,floatNum,intNum,id,+,-} 
FIRST(RelExprTail) = {EPSILON,eq,geq,gt,leq,lt,neq} 
FIRST(ArithExpr) = {(,not,floatNum,intNum,id,+,-} 
FIRST(ArithExprTail) = {EPSILON,+,-,or} 
FIRST(Term) = {(,not,floatNum,intNum,id,+,-} 
FIRST(TermTail) = {EPSILON,*,/,and} 
FIRST(Factor) = {+,-.id,floatNum,intNum,not,(} 
FIRST(Num) = {intNum,floatNum} 
FIRST(Sign) = {+,-} 
FIRST(EvalExprHead) = {id} 
FIRST(EvalExprTail) = {EPSILON,(,.,[} 
FIRST(EvalIndiceHead) = {[} 
FIRST(EvalIndiceTail) = {EPSILON,[,.}
FIRST(EvalNestHead) = {.} 
FIRST(Variable) = {id}
FIRST(VariableTail) = {EPSILON,.,[}
FIRST(VarIndiceTail) = {EPSILON,[}
FIRST(VarNest) = {.}
FIRST(FunctionCallExpr) = {(} 
FIRST(Indice) = {[} 
FIRST(AParams) = {EPSILON,(,not,floatNum,intNum,id,+,-} 
FIRST(AParamsTail) = {EPSILON,,}
FIRST(AssignOp) = {=}
FIRST(RelOp) = {neq,lt,leq,gt,geq,eq}
FIRST(AddOp) = {or,-.+}
FIRST(MultOp) = {and,/,*}

FOLLOW(Inherit) = {{}
FOLLOW(InheritList) = {{}
FOLLOW(ClassVarDecl) = {}}
FOLLOW(FuncHeadTail) = {{}
FOLLOW(FuncVarDecl) = {}}
FOLLOW(ArraySizeTail) = {;,),,}
FOLLOW(FParams) = {)}
FOLLOW(FParamsTail) = {)}
FOLLOW(FuncDefList) = {$}
FOLLOW(StatementTail) = {}}
FOLLOW(StatBlock) = {;,else}
FOLLOW(RelExprTail) = {;,),,}
FOLLOW(ArithExprTail) = {;,),,,eq,geq,gt,leq,lt,neq,]}
FOLLOW(TermTail) = {;,),,,eq,geq,gt,leq,lt,neq,],+,-,or}
FOLLOW(EvalExprTail) = {;, ), ,, eq, geq, gt, leq, lt, neq, ], +, -, or, *, /, and}
FOLLOW(EvalIndiceTail) = {;, ), ,, eq, geq, gt, leq, lt, neq, ], +, -, or, *, /, and}
FOLLOW(VariableTail) = {=,)}
FOLLOW(VariableIndiceTail) = {=,)}
FOLLOW(AParams) = {)}
FOLLOW(AParamsTail) = {)}

