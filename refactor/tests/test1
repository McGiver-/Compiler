/*
    this tests:
            1.1
            1.2
            1.3

            1.1.1
            1.1.2

            2.2.1
            2.2.2
            2.3.1

            3.1.1
            3.1.2
            3.1.3
            3.1.4
            3.1.5
            3.1.7 
            3.1.8 
            3.1.9
            3.1.10
            3.1.11


            3.2.1
            3.2.2
            3.2.3
            4.3.2

            5.1.1
            5.1.2
            5.1.3
            5.1.4
            5.1.5

            5.2.1
            5.2.2
            5.2.4
            5.2.8
            5.2.9
            5.2.10
            5.2.12
            5.2.13

            5.3.1
            5.3.2
            5.4
            5.4.1

*/

/* 1.1.2
    here is another comment 
*/ 
class Utility { // 1.1.2 1.3.5
    int randomize(int some,int another);
    $ % # 
    int useful;
    int multi[3][4];
    float hello; // 5.2.13
    float hello;
    Utility utils[3][4]; // 3.3.1
    Utility funcDef(int one, float two[3], Utility three); // 5.2.10
 };

class Helper {
};

float freeFunc(float free){ // 3.1.3
    return (1); // 3.1.9 5.2.1 5.2.8
};

float Recurse(float free){
    return (Recurse(1.2)); // 3.1.9 5.2.1 5.2.8
};


int Utility::randomize(int some,int another){ // 3.1.4
    int somevar;
    int useful;
     useful = another[3+3+multi[3][4][useful]].come(1.2); // 1.1.1 3.1.10 3.1.11 5.2.12 5.2.9


    for( int idx = 1; idx == 99; idx = idx + 21) { // 3.1.8
        if(array[idx] == maxValue + 1 ) then { // 3.1.7 
             if(array[idx] == maxValue + 1 ) then {
                 maxValue = array[idx];
            }else{
            };
        }else{
        };
     }; 

     return (randomize(4,3,4));
}; 
 program { // 3.1.2


    for( int idx = 1; idx == 99; idx = idx + 21) {
        if(array[idx] == maxValue + 1 ) then {
             if(array[idx] == maxValue + 1 ) then {
                 maxValue = array[idx];
            }else{
            };
        }else{
        };
     };
};